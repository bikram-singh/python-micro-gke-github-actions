name: CI/CD - Build Flask App → Artifactregistry → Deploy on GKE

on:
  push:
    branches:
      - main   # Trigger workflow only when pushing to the main branch

env:
  IMAGE_NAME: flask-microservice                          # Your container/app name
  REGION: ${{ secrets.GKE_LOCATION }}                     # GKE & Artifact Registry region
  REPO: ${{ secrets.ARTIFACT_REGISTRY_REPO }}              # Artifact Registry repository name

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Authenticate to Google Cloud via Workload Identity Federation
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.GCP_WORKLOAD_ID_POOL }}/providers/${{ secrets.GCP_WORKLOAD_ID_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}

      # Step 3: Configure Docker for Artifact Registry
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      # Step 4: Build and push Docker image to Artifact Registry
      - name: Build and push Docker image
        run: |
          IMAGE="${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ env.REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          docker build -t "$IMAGE" .
          docker push "$IMAGE"

      # Step 5: Get credentials for GKE cluster
      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER }} \
            --region ${{ env.REGION }} \
            --project ${{ secrets.GCP_PROJECT }}

      # Step 6: Deploy updated image to GKE
      - name: Deploy to GKE
        run: |
          IMAGE="${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ env.REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          kubectl set image deployment/${{ env.IMAGE_NAME }} ${{ env.IMAGE_NAME }}="$IMAGE"
          kubectl rollout status deployment/${{ env.IMAGE_NAME }}
